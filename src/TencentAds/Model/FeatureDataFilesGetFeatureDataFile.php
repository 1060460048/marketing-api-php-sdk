<?php
/**
 * FeatureDataFilesGetFeatureDataFile
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * FeatureDataFilesGetFeatureDataFile Class Doc Comment
 *
 * @category Class
 * @description feature_data_file返回结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeatureDataFilesGetFeatureDataFile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'feature_data_files_get_feature_data_file';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dataFileId' => 'int',
        'accountId' => 'int',
        'fileName' => 'string',
        'userIdType' => '\TencentAds\Model\FeatureDataFilesUserIdType',
        'appId' => 'string',
        'lineCount' => 'int',
        'validCount' => 'int',
        'featureCount' => 'int',
        'validFeatureCount' => 'int',
        'processStatus' => '\TencentAds\Model\JanusFileProcessStatus',
        'errorCode' => 'int',
        'createdTime' => 'string',
        'lastModifiedTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dataFileId' => 'int64',
        'accountId' => 'int64',
        'fileName' => null,
        'userIdType' => null,
        'appId' => null,
        'lineCount' => 'int64',
        'validCount' => 'int64',
        'featureCount' => 'int64',
        'validFeatureCount' => 'int64',
        'processStatus' => null,
        'errorCode' => 'int64',
        'createdTime' => null,
        'lastModifiedTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dataFileId' => 'data_file_id',
        'accountId' => 'account_id',
        'fileName' => 'file_name',
        'userIdType' => 'user_id_type',
        'appId' => 'app_id',
        'lineCount' => 'line_count',
        'validCount' => 'valid_count',
        'featureCount' => 'feature_count',
        'validFeatureCount' => 'valid_feature_count',
        'processStatus' => 'process_status',
        'errorCode' => 'error_code',
        'createdTime' => 'created_time',
        'lastModifiedTime' => 'last_modified_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dataFileId' => 'setDataFileId',
        'accountId' => 'setAccountId',
        'fileName' => 'setFileName',
        'userIdType' => 'setUserIdType',
        'appId' => 'setAppId',
        'lineCount' => 'setLineCount',
        'validCount' => 'setValidCount',
        'featureCount' => 'setFeatureCount',
        'validFeatureCount' => 'setValidFeatureCount',
        'processStatus' => 'setProcessStatus',
        'errorCode' => 'setErrorCode',
        'createdTime' => 'setCreatedTime',
        'lastModifiedTime' => 'setLastModifiedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dataFileId' => 'getDataFileId',
        'accountId' => 'getAccountId',
        'fileName' => 'getFileName',
        'userIdType' => 'getUserIdType',
        'appId' => 'getAppId',
        'lineCount' => 'getLineCount',
        'validCount' => 'getValidCount',
        'featureCount' => 'getFeatureCount',
        'validFeatureCount' => 'getValidFeatureCount',
        'processStatus' => 'getProcessStatus',
        'errorCode' => 'getErrorCode',
        'createdTime' => 'getCreatedTime',
        'lastModifiedTime' => 'getLastModifiedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dataFileId'] = isset($data['dataFileId']) ? $data['dataFileId'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['fileName'] = isset($data['fileName']) ? $data['fileName'] : null;
        $this->container['userIdType'] = isset($data['userIdType']) ? $data['userIdType'] : null;
        $this->container['appId'] = isset($data['appId']) ? $data['appId'] : null;
        $this->container['lineCount'] = isset($data['lineCount']) ? $data['lineCount'] : null;
        $this->container['validCount'] = isset($data['validCount']) ? $data['validCount'] : null;
        $this->container['featureCount'] = isset($data['featureCount']) ? $data['featureCount'] : null;
        $this->container['validFeatureCount'] = isset($data['validFeatureCount']) ? $data['validFeatureCount'] : null;
        $this->container['processStatus'] = isset($data['processStatus']) ? $data['processStatus'] : null;
        $this->container['errorCode'] = isset($data['errorCode']) ? $data['errorCode'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
        $this->container['lastModifiedTime'] = isset($data['lastModifiedTime']) ? $data['lastModifiedTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dataFileId
     *
     * @return int
     */
    public function getDataFileId()
    {
        return $this->container['dataFileId'];
    }

    /**
     * Sets dataFileId
     *
     * @param int $dataFileId dataFileId
     *
     * @return $this
     */
    public function setDataFileId($dataFileId)
    {
        $this->container['dataFileId'] = $dataFileId;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets fileName
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName
     *
     * @param string $fileName fileName
     *
     * @return $this
     */
    public function setFileName($fileName)
    {
        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets userIdType
     *
     * @return \TencentAds\Model\FeatureDataFilesUserIdType
     */
    public function getUserIdType()
    {
        return $this->container['userIdType'];
    }

    /**
     * Sets userIdType
     *
     * @param \TencentAds\Model\FeatureDataFilesUserIdType $userIdType userIdType
     *
     * @return $this
     */
    public function setUserIdType($userIdType)
    {
        $this->container['userIdType'] = $userIdType;

        return $this;
    }

    /**
     * Gets appId
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['appId'];
    }

    /**
     * Sets appId
     *
     * @param string $appId appId
     *
     * @return $this
     */
    public function setAppId($appId)
    {
        $this->container['appId'] = $appId;

        return $this;
    }

    /**
     * Gets lineCount
     *
     * @return int
     */
    public function getLineCount()
    {
        return $this->container['lineCount'];
    }

    /**
     * Sets lineCount
     *
     * @param int $lineCount lineCount
     *
     * @return $this
     */
    public function setLineCount($lineCount)
    {
        $this->container['lineCount'] = $lineCount;

        return $this;
    }

    /**
     * Gets validCount
     *
     * @return int
     */
    public function getValidCount()
    {
        return $this->container['validCount'];
    }

    /**
     * Sets validCount
     *
     * @param int $validCount validCount
     *
     * @return $this
     */
    public function setValidCount($validCount)
    {
        $this->container['validCount'] = $validCount;

        return $this;
    }

    /**
     * Gets featureCount
     *
     * @return int
     */
    public function getFeatureCount()
    {
        return $this->container['featureCount'];
    }

    /**
     * Sets featureCount
     *
     * @param int $featureCount featureCount
     *
     * @return $this
     */
    public function setFeatureCount($featureCount)
    {
        $this->container['featureCount'] = $featureCount;

        return $this;
    }

    /**
     * Gets validFeatureCount
     *
     * @return int
     */
    public function getValidFeatureCount()
    {
        return $this->container['validFeatureCount'];
    }

    /**
     * Sets validFeatureCount
     *
     * @param int $validFeatureCount validFeatureCount
     *
     * @return $this
     */
    public function setValidFeatureCount($validFeatureCount)
    {
        $this->container['validFeatureCount'] = $validFeatureCount;

        return $this;
    }

    /**
     * Gets processStatus
     *
     * @return \TencentAds\Model\JanusFileProcessStatus
     */
    public function getProcessStatus()
    {
        return $this->container['processStatus'];
    }

    /**
     * Sets processStatus
     *
     * @param \TencentAds\Model\JanusFileProcessStatus $processStatus processStatus
     *
     * @return $this
     */
    public function setProcessStatus($processStatus)
    {
        $this->container['processStatus'] = $processStatus;

        return $this;
    }

    /**
     * Gets errorCode
     *
     * @return int
     */
    public function getErrorCode()
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode
     *
     * @param int $errorCode errorCode
     *
     * @return $this
     */
    public function setErrorCode($errorCode)
    {
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets createdTime
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param string $createdTime createdTime
     *
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets lastModifiedTime
     *
     * @return string
     */
    public function getLastModifiedTime()
    {
        return $this->container['lastModifiedTime'];
    }

    /**
     * Sets lastModifiedTime
     *
     * @param string $lastModifiedTime lastModifiedTime
     *
     * @return $this
     */
    public function setLastModifiedTime($lastModifiedTime)
    {
        $this->container['lastModifiedTime'] = $lastModifiedTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


