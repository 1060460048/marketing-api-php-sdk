<?php
/**
 * AdCreativeOutsideCreativeExtSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * AdCreativeOutsideCreativeExtSpec Class Doc Comment
 *
 * @category Class
 * @description 框外创意扩展信息
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdCreativeOutsideCreativeExtSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ad_creative_outside_creative_ext_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'orderParam' => 'string',
        'creativeParam' => 'string',
        'passthroughParams' => 'string',
        'useShortKey' => 'bool',
        'useSecondPage' => 'bool',
        'clickUrl2' => 'string',
        'needPing' => '\TencentAds\Model\AdCreativeCreativeExtSpecNeedPing',
        'offlineStopFlag' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'orderParam' => null,
        'creativeParam' => null,
        'passthroughParams' => null,
        'useShortKey' => null,
        'useSecondPage' => null,
        'clickUrl2' => null,
        'needPing' => null,
        'offlineStopFlag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderParam' => 'order_param',
        'creativeParam' => 'creative_param',
        'passthroughParams' => 'passthrough_params',
        'useShortKey' => 'use_short_key',
        'useSecondPage' => 'use_second_page',
        'clickUrl2' => 'click_url2',
        'needPing' => 'need_ping',
        'offlineStopFlag' => 'offline_stop_flag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderParam' => 'setOrderParam',
        'creativeParam' => 'setCreativeParam',
        'passthroughParams' => 'setPassthroughParams',
        'useShortKey' => 'setUseShortKey',
        'useSecondPage' => 'setUseSecondPage',
        'clickUrl2' => 'setClickUrl2',
        'needPing' => 'setNeedPing',
        'offlineStopFlag' => 'setOfflineStopFlag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderParam' => 'getOrderParam',
        'creativeParam' => 'getCreativeParam',
        'passthroughParams' => 'getPassthroughParams',
        'useShortKey' => 'getUseShortKey',
        'useSecondPage' => 'getUseSecondPage',
        'clickUrl2' => 'getClickUrl2',
        'needPing' => 'getNeedPing',
        'offlineStopFlag' => 'getOfflineStopFlag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderParam'] = isset($data['orderParam']) ? $data['orderParam'] : null;
        $this->container['creativeParam'] = isset($data['creativeParam']) ? $data['creativeParam'] : null;
        $this->container['passthroughParams'] = isset($data['passthroughParams']) ? $data['passthroughParams'] : null;
        $this->container['useShortKey'] = isset($data['useShortKey']) ? $data['useShortKey'] : null;
        $this->container['useSecondPage'] = isset($data['useSecondPage']) ? $data['useSecondPage'] : null;
        $this->container['clickUrl2'] = isset($data['clickUrl2']) ? $data['clickUrl2'] : null;
        $this->container['needPing'] = isset($data['needPing']) ? $data['needPing'] : null;
        $this->container['offlineStopFlag'] = isset($data['offlineStopFlag']) ? $data['offlineStopFlag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderParam
     *
     * @return string
     */
    public function getOrderParam()
    {
        return $this->container['orderParam'];
    }

    /**
     * Sets orderParam
     *
     * @param string $orderParam orderParam
     *
     * @return $this
     */
    public function setOrderParam($orderParam)
    {
        $this->container['orderParam'] = $orderParam;

        return $this;
    }

    /**
     * Gets creativeParam
     *
     * @return string
     */
    public function getCreativeParam()
    {
        return $this->container['creativeParam'];
    }

    /**
     * Sets creativeParam
     *
     * @param string $creativeParam creativeParam
     *
     * @return $this
     */
    public function setCreativeParam($creativeParam)
    {
        $this->container['creativeParam'] = $creativeParam;

        return $this;
    }

    /**
     * Gets passthroughParams
     *
     * @return string
     */
    public function getPassthroughParams()
    {
        return $this->container['passthroughParams'];
    }

    /**
     * Sets passthroughParams
     *
     * @param string $passthroughParams passthroughParams
     *
     * @return $this
     */
    public function setPassthroughParams($passthroughParams)
    {
        $this->container['passthroughParams'] = $passthroughParams;

        return $this;
    }

    /**
     * Gets useShortKey
     *
     * @return bool
     */
    public function getUseShortKey()
    {
        return $this->container['useShortKey'];
    }

    /**
     * Sets useShortKey
     *
     * @param bool $useShortKey useShortKey
     *
     * @return $this
     */
    public function setUseShortKey($useShortKey)
    {
        $this->container['useShortKey'] = $useShortKey;

        return $this;
    }

    /**
     * Gets useSecondPage
     *
     * @return bool
     */
    public function getUseSecondPage()
    {
        return $this->container['useSecondPage'];
    }

    /**
     * Sets useSecondPage
     *
     * @param bool $useSecondPage useSecondPage
     *
     * @return $this
     */
    public function setUseSecondPage($useSecondPage)
    {
        $this->container['useSecondPage'] = $useSecondPage;

        return $this;
    }

    /**
     * Gets clickUrl2
     *
     * @return string
     */
    public function getClickUrl2()
    {
        return $this->container['clickUrl2'];
    }

    /**
     * Sets clickUrl2
     *
     * @param string $clickUrl2 clickUrl2
     *
     * @return $this
     */
    public function setClickUrl2($clickUrl2)
    {
        $this->container['clickUrl2'] = $clickUrl2;

        return $this;
    }

    /**
     * Gets needPing
     *
     * @return \TencentAds\Model\AdCreativeCreativeExtSpecNeedPing
     */
    public function getNeedPing()
    {
        return $this->container['needPing'];
    }

    /**
     * Sets needPing
     *
     * @param \TencentAds\Model\AdCreativeCreativeExtSpecNeedPing $needPing needPing
     *
     * @return $this
     */
    public function setNeedPing($needPing)
    {
        $this->container['needPing'] = $needPing;

        return $this;
    }

    /**
     * Gets offlineStopFlag
     *
     * @return bool
     */
    public function getOfflineStopFlag()
    {
        return $this->container['offlineStopFlag'];
    }

    /**
     * Sets offlineStopFlag
     *
     * @param bool $offlineStopFlag offlineStopFlag
     *
     * @return $this
     */
    public function setOfflineStopFlag($offlineStopFlag)
    {
        $this->container['offlineStopFlag'] = $offlineStopFlag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


