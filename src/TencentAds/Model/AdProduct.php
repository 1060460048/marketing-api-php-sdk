<?php
/**
 * AdProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * AdProduct Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ad_product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'productType' => 'string',
        'productRefsId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'productType' => null,
        'productRefsId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'productType' => 'product_type',
        'productRefsId' => 'product_refs_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'productType' => 'setProductType',
        'productRefsId' => 'setProductRefsId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'productType' => 'getProductType',
        'productRefsId' => 'getProductRefsId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRODUCT_TYPE_UNKNOWN = 'UNKNOWN';
    const PRODUCT_TYPE_PRODUCT_TYPE_PAIPAI_ITEM = 'PRODUCT_TYPE_PAIPAI_ITEM';
    const PRODUCT_TYPE_PRODUCT_TYPE_PAIPAI_SHOP = 'PRODUCT_TYPE_PAIPAI_SHOP';
    const PRODUCT_TYPE_PRODUCT_TYPE_QZONE_PAGE_INDEX = 'PRODUCT_TYPE_QZONE_PAGE_INDEX';
    const PRODUCT_TYPE_PRODUCT_TYPE_APP_PC = 'PRODUCT_TYPE_APP_PC';
    const PRODUCT_TYPE_PRODUCT_TYPE_MYAPP = 'PRODUCT_TYPE_MYAPP';
    const PRODUCT_TYPE_PRODUCT_TYPE_QQ_GROUP = 'PRODUCT_TYPE_QQ_GROUP';
    const PRODUCT_TYPE_PRODUCT_TYPE_QQ_BUSINESS = 'PRODUCT_TYPE_QQ_BUSINESS';
    const PRODUCT_TYPE_PRODUCT_TYPE_B_QQ = 'PRODUCT_TYPE_B_QQ';
    const PRODUCT_TYPE_PRODUCT_TYPE_51_BUY = 'PRODUCT_TYPE_51BUY';
    const PRODUCT_TYPE_PRODUCT_TYPE_QQ_TUAN = 'PRODUCT_TYPE_QQ_TUAN';
    const PRODUCT_TYPE_PRODUCT_TYPE_TASK = 'PRODUCT_TYPE_TASK';
    const PRODUCT_TYPE_PRODUCT_TYPE_APP_ANDROID_OPEN_PLATFORM = 'PRODUCT_TYPE_APP_ANDROID_OPEN_PLATFORM';
    const PRODUCT_TYPE_PRODUCT_TYPE_FEEDS = 'PRODUCT_TYPE_FEEDS';
    const PRODUCT_TYPE_PRODUCT_TYPE_PAIPAI_SHOP_URL = 'PRODUCT_TYPE_PAIPAI_SHOP_URL';
    const PRODUCT_TYPE_PRODUCT_TYPE_LIVE_VIDEO_ROOM = 'PRODUCT_TYPE_LIVE_VIDEO_ROOM';
    const PRODUCT_TYPE_PRODUCT_TYPE_QZONE_GIFT = 'PRODUCT_TYPE_QZONE_GIFT';
    const PRODUCT_TYPE_PRODUCT_TYPE_QZONE_SIGN = 'PRODUCT_TYPE_QZONE_SIGN';
    const PRODUCT_TYPE_PRODUCT_TYPE_APP_IOS = 'PRODUCT_TYPE_APP_IOS';
    const PRODUCT_TYPE_PRODUCT_TYPE_EXCHANGE_APP_FOR_MYAPP = 'PRODUCT_TYPE_EXCHANGE_APP_FOR_MYAPP';
    const PRODUCT_TYPE_PRODUCT_TYPE_QZONE_PAGE_ARTICLE = 'PRODUCT_TYPE_QZONE_PAGE_ARTICLE';
    const PRODUCT_TYPE_PRODUCT_TYPE_QZONE_PAGE_IFRAMED = 'PRODUCT_TYPE_QZONE_PAGE_IFRAMED';
    const PRODUCT_TYPE_PRODUCT_TYPE_WECHAT = 'PRODUCT_TYPE_WECHAT';
    const PRODUCT_TYPE_PRODUCT_TYPE_OPEN_PLATFORM_APP_MOB_TASK = 'PRODUCT_TYPE_OPEN_PLATFORM_APP_MOB_TASK';
    const PRODUCT_TYPE_PRODUCT_TYPE_LINK_JD = 'PRODUCT_TYPE_LINK_JD';
    const PRODUCT_TYPE_PRODUCT_TYPE_DIANPING_SHOP = 'PRODUCT_TYPE_DIANPING_SHOP';
    const PRODUCT_TYPE_PRODUCT_TYPE_DIANPING_COUPON = 'PRODUCT_TYPE_DIANPING_COUPON';
    const PRODUCT_TYPE_PRODUCT_TYPE_DIANPING_TUAN = 'PRODUCT_TYPE_DIANPING_TUAN';
    const PRODUCT_TYPE_PRODUCT_TYPE_WECHAT_ARTICLE = 'PRODUCT_TYPE_WECHAT_ARTICLE';
    const PRODUCT_TYPE_PRODUCT_TYPE_SHOP_WECHAT = 'PRODUCT_TYPE_SHOP_WECHAT';
    const PRODUCT_TYPE_PRODUCT_TYPE_ECOMMERCE = 'PRODUCT_TYPE_ECOMMERCE';
    const PRODUCT_TYPE_PRODUCT_TYPE_LINK_WECHAT = 'PRODUCT_TYPE_LINK_WECHAT';
    const PRODUCT_TYPE_PRODUCT_TYPE_JD_ITEM = 'PRODUCT_TYPE_JD_ITEM';
    const PRODUCT_TYPE_PRODUCT_TYPE_JD_SHOP = 'PRODUCT_TYPE_JD_SHOP';
    const PRODUCT_TYPE_PRODUCT_TYPE_TENCENT_KE = 'PRODUCT_TYPE_TENCENT_KE';
    const PRODUCT_TYPE_PRODUCT_TYPE_MYAPP_PROMOTION = 'PRODUCT_TYPE_MYAPP_PROMOTION';
    const PRODUCT_TYPE_PRODUCT_TYPE_LINK_MOBILE_QQ_MP = 'PRODUCT_TYPE_LINK_MOBILE_QQ_MP';
    const PRODUCT_TYPE_PRODUCT_TYPE_APP_ANDROID_UNION = 'PRODUCT_TYPE_APP_ANDROID_UNION';
    const PRODUCT_TYPE_PRODUCT_TYPE_LBS_WECHAT = 'PRODUCT_TYPE_LBS_WECHAT';
    const PRODUCT_TYPE_PRODUCT_TYPE_QZONE_PAGE_VIDEO = 'PRODUCT_TYPE_QZONE_PAGE_VIDEO';
    const PRODUCT_TYPE_PRODUCT_TYPE_LINK = 'PRODUCT_TYPE_LINK';
    const PRODUCT_TYPE_PRODUCT_TYPE_URL_INNER_TENCENT_DOMAIN = 'PRODUCT_TYPE_URL_INNER_TENCENT_DOMAIN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_UNKNOWN,
            self::PRODUCT_TYPE_PRODUCT_TYPE_PAIPAI_ITEM,
            self::PRODUCT_TYPE_PRODUCT_TYPE_PAIPAI_SHOP,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QZONE_PAGE_INDEX,
            self::PRODUCT_TYPE_PRODUCT_TYPE_APP_PC,
            self::PRODUCT_TYPE_PRODUCT_TYPE_MYAPP,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QQ_GROUP,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QQ_BUSINESS,
            self::PRODUCT_TYPE_PRODUCT_TYPE_B_QQ,
            self::PRODUCT_TYPE_PRODUCT_TYPE_51_BUY,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QQ_TUAN,
            self::PRODUCT_TYPE_PRODUCT_TYPE_TASK,
            self::PRODUCT_TYPE_PRODUCT_TYPE_APP_ANDROID_OPEN_PLATFORM,
            self::PRODUCT_TYPE_PRODUCT_TYPE_FEEDS,
            self::PRODUCT_TYPE_PRODUCT_TYPE_PAIPAI_SHOP_URL,
            self::PRODUCT_TYPE_PRODUCT_TYPE_LIVE_VIDEO_ROOM,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QZONE_GIFT,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QZONE_SIGN,
            self::PRODUCT_TYPE_PRODUCT_TYPE_APP_IOS,
            self::PRODUCT_TYPE_PRODUCT_TYPE_EXCHANGE_APP_FOR_MYAPP,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QZONE_PAGE_ARTICLE,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QZONE_PAGE_IFRAMED,
            self::PRODUCT_TYPE_PRODUCT_TYPE_WECHAT,
            self::PRODUCT_TYPE_PRODUCT_TYPE_OPEN_PLATFORM_APP_MOB_TASK,
            self::PRODUCT_TYPE_PRODUCT_TYPE_LINK_JD,
            self::PRODUCT_TYPE_PRODUCT_TYPE_DIANPING_SHOP,
            self::PRODUCT_TYPE_PRODUCT_TYPE_DIANPING_COUPON,
            self::PRODUCT_TYPE_PRODUCT_TYPE_DIANPING_TUAN,
            self::PRODUCT_TYPE_PRODUCT_TYPE_WECHAT_ARTICLE,
            self::PRODUCT_TYPE_PRODUCT_TYPE_SHOP_WECHAT,
            self::PRODUCT_TYPE_PRODUCT_TYPE_ECOMMERCE,
            self::PRODUCT_TYPE_PRODUCT_TYPE_LINK_WECHAT,
            self::PRODUCT_TYPE_PRODUCT_TYPE_JD_ITEM,
            self::PRODUCT_TYPE_PRODUCT_TYPE_JD_SHOP,
            self::PRODUCT_TYPE_PRODUCT_TYPE_TENCENT_KE,
            self::PRODUCT_TYPE_PRODUCT_TYPE_MYAPP_PROMOTION,
            self::PRODUCT_TYPE_PRODUCT_TYPE_LINK_MOBILE_QQ_MP,
            self::PRODUCT_TYPE_PRODUCT_TYPE_APP_ANDROID_UNION,
            self::PRODUCT_TYPE_PRODUCT_TYPE_LBS_WECHAT,
            self::PRODUCT_TYPE_PRODUCT_TYPE_QZONE_PAGE_VIDEO,
            self::PRODUCT_TYPE_PRODUCT_TYPE_LINK,
            self::PRODUCT_TYPE_PRODUCT_TYPE_URL_INNER_TENCENT_DOMAIN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['productType'] = isset($data['productType']) ? $data['productType'] : null;
        $this->container['productRefsId'] = isset($data['productRefsId']) ? $data['productRefsId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['productType']) && !in_array($this->container['productType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'productType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets productType
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['productType'];
    }

    /**
     * Sets productType
     *
     * @param string $productType productType
     *
     * @return $this
     */
    public function setProductType($productType)
    {
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($productType) && !in_array($productType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'productType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['productType'] = $productType;

        return $this;
    }

    /**
     * Gets productRefsId
     *
     * @return string
     */
    public function getProductRefsId()
    {
        return $this->container['productRefsId'];
    }

    /**
     * Sets productRefsId
     *
     * @param string $productRefsId productRefsId
     *
     * @return $this
     */
    public function setProductRefsId($productRefsId)
    {
        $this->container['productRefsId'] = $productRefsId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


