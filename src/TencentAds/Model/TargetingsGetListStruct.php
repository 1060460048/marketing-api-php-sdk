<?php
/**
 * TargetingsGetListStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * TargetingsGetListStruct Class Doc Comment
 *
 * @category Class
 * @description 返回结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TargetingsGetListStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'targetings_get_list_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'targetingId' => 'int',
        'targetingName' => 'string',
        'targeting' => '\TencentAds\Model\TargetingReadTargetingSetting',
        'isIncludeUnsupportedTargeting' => 'bool',
        'description' => 'string',
        'uiVisibility' => '\TencentAds\Model\TargetingUiVisibility',
        'isDeleted' => 'bool',
        'createdTime' => 'int',
        'lastModifiedTime' => 'int',
        'outerTargetingId' => 'int',
        'adLockStatus' => '\TencentAds\Model\AdLockStatus',
        'targetingTranslation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'targetingId' => 'int64',
        'targetingName' => null,
        'targeting' => null,
        'isIncludeUnsupportedTargeting' => null,
        'description' => null,
        'uiVisibility' => null,
        'isDeleted' => null,
        'createdTime' => 'int64',
        'lastModifiedTime' => 'int64',
        'outerTargetingId' => 'int64',
        'adLockStatus' => null,
        'targetingTranslation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'targetingId' => 'targeting_id',
        'targetingName' => 'targeting_name',
        'targeting' => 'targeting',
        'isIncludeUnsupportedTargeting' => 'is_include_unsupported_targeting',
        'description' => 'description',
        'uiVisibility' => 'ui_visibility',
        'isDeleted' => 'is_deleted',
        'createdTime' => 'created_time',
        'lastModifiedTime' => 'last_modified_time',
        'outerTargetingId' => 'outer_targeting_id',
        'adLockStatus' => 'ad_lock_status',
        'targetingTranslation' => 'targeting_translation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'targetingId' => 'setTargetingId',
        'targetingName' => 'setTargetingName',
        'targeting' => 'setTargeting',
        'isIncludeUnsupportedTargeting' => 'setIsIncludeUnsupportedTargeting',
        'description' => 'setDescription',
        'uiVisibility' => 'setUiVisibility',
        'isDeleted' => 'setIsDeleted',
        'createdTime' => 'setCreatedTime',
        'lastModifiedTime' => 'setLastModifiedTime',
        'outerTargetingId' => 'setOuterTargetingId',
        'adLockStatus' => 'setAdLockStatus',
        'targetingTranslation' => 'setTargetingTranslation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'targetingId' => 'getTargetingId',
        'targetingName' => 'getTargetingName',
        'targeting' => 'getTargeting',
        'isIncludeUnsupportedTargeting' => 'getIsIncludeUnsupportedTargeting',
        'description' => 'getDescription',
        'uiVisibility' => 'getUiVisibility',
        'isDeleted' => 'getIsDeleted',
        'createdTime' => 'getCreatedTime',
        'lastModifiedTime' => 'getLastModifiedTime',
        'outerTargetingId' => 'getOuterTargetingId',
        'adLockStatus' => 'getAdLockStatus',
        'targetingTranslation' => 'getTargetingTranslation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['targetingId'] = isset($data['targetingId']) ? $data['targetingId'] : null;
        $this->container['targetingName'] = isset($data['targetingName']) ? $data['targetingName'] : null;
        $this->container['targeting'] = isset($data['targeting']) ? $data['targeting'] : null;
        $this->container['isIncludeUnsupportedTargeting'] = isset($data['isIncludeUnsupportedTargeting']) ? $data['isIncludeUnsupportedTargeting'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['uiVisibility'] = isset($data['uiVisibility']) ? $data['uiVisibility'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
        $this->container['lastModifiedTime'] = isset($data['lastModifiedTime']) ? $data['lastModifiedTime'] : null;
        $this->container['outerTargetingId'] = isset($data['outerTargetingId']) ? $data['outerTargetingId'] : null;
        $this->container['adLockStatus'] = isset($data['adLockStatus']) ? $data['adLockStatus'] : null;
        $this->container['targetingTranslation'] = isset($data['targetingTranslation']) ? $data['targetingTranslation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets targetingId
     *
     * @return int
     */
    public function getTargetingId()
    {
        return $this->container['targetingId'];
    }

    /**
     * Sets targetingId
     *
     * @param int $targetingId targetingId
     *
     * @return $this
     */
    public function setTargetingId($targetingId)
    {
        $this->container['targetingId'] = $targetingId;

        return $this;
    }

    /**
     * Gets targetingName
     *
     * @return string
     */
    public function getTargetingName()
    {
        return $this->container['targetingName'];
    }

    /**
     * Sets targetingName
     *
     * @param string $targetingName targetingName
     *
     * @return $this
     */
    public function setTargetingName($targetingName)
    {
        $this->container['targetingName'] = $targetingName;

        return $this;
    }

    /**
     * Gets targeting
     *
     * @return \TencentAds\Model\TargetingReadTargetingSetting
     */
    public function getTargeting()
    {
        return $this->container['targeting'];
    }

    /**
     * Sets targeting
     *
     * @param \TencentAds\Model\TargetingReadTargetingSetting $targeting targeting
     *
     * @return $this
     */
    public function setTargeting($targeting)
    {
        $this->container['targeting'] = $targeting;

        return $this;
    }

    /**
     * Gets isIncludeUnsupportedTargeting
     *
     * @return bool
     */
    public function getIsIncludeUnsupportedTargeting()
    {
        return $this->container['isIncludeUnsupportedTargeting'];
    }

    /**
     * Sets isIncludeUnsupportedTargeting
     *
     * @param bool $isIncludeUnsupportedTargeting isIncludeUnsupportedTargeting
     *
     * @return $this
     */
    public function setIsIncludeUnsupportedTargeting($isIncludeUnsupportedTargeting)
    {
        $this->container['isIncludeUnsupportedTargeting'] = $isIncludeUnsupportedTargeting;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets uiVisibility
     *
     * @return \TencentAds\Model\TargetingUiVisibility
     */
    public function getUiVisibility()
    {
        return $this->container['uiVisibility'];
    }

    /**
     * Sets uiVisibility
     *
     * @param \TencentAds\Model\TargetingUiVisibility $uiVisibility uiVisibility
     *
     * @return $this
     */
    public function setUiVisibility($uiVisibility)
    {
        $this->container['uiVisibility'] = $uiVisibility;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted isDeleted
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets createdTime
     *
     * @return int
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param int $createdTime createdTime
     *
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets lastModifiedTime
     *
     * @return int
     */
    public function getLastModifiedTime()
    {
        return $this->container['lastModifiedTime'];
    }

    /**
     * Sets lastModifiedTime
     *
     * @param int $lastModifiedTime lastModifiedTime
     *
     * @return $this
     */
    public function setLastModifiedTime($lastModifiedTime)
    {
        $this->container['lastModifiedTime'] = $lastModifiedTime;

        return $this;
    }

    /**
     * Gets outerTargetingId
     *
     * @return int
     */
    public function getOuterTargetingId()
    {
        return $this->container['outerTargetingId'];
    }

    /**
     * Sets outerTargetingId
     *
     * @param int $outerTargetingId outerTargetingId
     *
     * @return $this
     */
    public function setOuterTargetingId($outerTargetingId)
    {
        $this->container['outerTargetingId'] = $outerTargetingId;

        return $this;
    }

    /**
     * Gets adLockStatus
     *
     * @return \TencentAds\Model\AdLockStatus
     */
    public function getAdLockStatus()
    {
        return $this->container['adLockStatus'];
    }

    /**
     * Sets adLockStatus
     *
     * @param \TencentAds\Model\AdLockStatus $adLockStatus adLockStatus
     *
     * @return $this
     */
    public function setAdLockStatus($adLockStatus)
    {
        $this->container['adLockStatus'] = $adLockStatus;

        return $this;
    }

    /**
     * Gets targetingTranslation
     *
     * @return string
     */
    public function getTargetingTranslation()
    {
        return $this->container['targetingTranslation'];
    }

    /**
     * Sets targetingTranslation
     *
     * @param string $targetingTranslation targetingTranslation
     *
     * @return $this
     */
    public function setTargetingTranslation($targetingTranslation)
    {
        $this->container['targetingTranslation'] = $targetingTranslation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


