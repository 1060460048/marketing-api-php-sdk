<?php
/**
 * AdTrackingUrlListStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * AdTrackingUrlListStruct Class Doc Comment
 *
 * @category Class
 * @description 点击、曝光监控URL
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdTrackingUrlListStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ad_tracking_url_list_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trackingUrlType' => '\TencentAds\Model\AdTrackingUrlType',
        'impressionTrackingUrl' => 'string',
        'clickTrackingUrl' => 'string',
        'activeViewTrackingUrl' => 'string',
        'videoPlayProgressTrackingUrl' => 'string',
        'impressionTrackingTime' => '\TencentAds\Model\AdImpressionTrackingTime',
        'videoPlayProgressPercent' => 'int',
        'videoPlayTrackingTime' => '\TencentAds\Model\AdVideoPlayTrackingTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trackingUrlType' => null,
        'impressionTrackingUrl' => null,
        'clickTrackingUrl' => null,
        'activeViewTrackingUrl' => null,
        'videoPlayProgressTrackingUrl' => null,
        'impressionTrackingTime' => null,
        'videoPlayProgressPercent' => 'int64',
        'videoPlayTrackingTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trackingUrlType' => 'tracking_url_type',
        'impressionTrackingUrl' => 'impression_tracking_url',
        'clickTrackingUrl' => 'click_tracking_url',
        'activeViewTrackingUrl' => 'active_view_tracking_url',
        'videoPlayProgressTrackingUrl' => 'video_play_progress_tracking_url',
        'impressionTrackingTime' => 'impression_tracking_time',
        'videoPlayProgressPercent' => 'video_play_progress_percent',
        'videoPlayTrackingTime' => 'video_play_tracking_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trackingUrlType' => 'setTrackingUrlType',
        'impressionTrackingUrl' => 'setImpressionTrackingUrl',
        'clickTrackingUrl' => 'setClickTrackingUrl',
        'activeViewTrackingUrl' => 'setActiveViewTrackingUrl',
        'videoPlayProgressTrackingUrl' => 'setVideoPlayProgressTrackingUrl',
        'impressionTrackingTime' => 'setImpressionTrackingTime',
        'videoPlayProgressPercent' => 'setVideoPlayProgressPercent',
        'videoPlayTrackingTime' => 'setVideoPlayTrackingTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trackingUrlType' => 'getTrackingUrlType',
        'impressionTrackingUrl' => 'getImpressionTrackingUrl',
        'clickTrackingUrl' => 'getClickTrackingUrl',
        'activeViewTrackingUrl' => 'getActiveViewTrackingUrl',
        'videoPlayProgressTrackingUrl' => 'getVideoPlayProgressTrackingUrl',
        'impressionTrackingTime' => 'getImpressionTrackingTime',
        'videoPlayProgressPercent' => 'getVideoPlayProgressPercent',
        'videoPlayTrackingTime' => 'getVideoPlayTrackingTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trackingUrlType'] = isset($data['trackingUrlType']) ? $data['trackingUrlType'] : null;
        $this->container['impressionTrackingUrl'] = isset($data['impressionTrackingUrl']) ? $data['impressionTrackingUrl'] : null;
        $this->container['clickTrackingUrl'] = isset($data['clickTrackingUrl']) ? $data['clickTrackingUrl'] : null;
        $this->container['activeViewTrackingUrl'] = isset($data['activeViewTrackingUrl']) ? $data['activeViewTrackingUrl'] : null;
        $this->container['videoPlayProgressTrackingUrl'] = isset($data['videoPlayProgressTrackingUrl']) ? $data['videoPlayProgressTrackingUrl'] : null;
        $this->container['impressionTrackingTime'] = isset($data['impressionTrackingTime']) ? $data['impressionTrackingTime'] : null;
        $this->container['videoPlayProgressPercent'] = isset($data['videoPlayProgressPercent']) ? $data['videoPlayProgressPercent'] : null;
        $this->container['videoPlayTrackingTime'] = isset($data['videoPlayTrackingTime']) ? $data['videoPlayTrackingTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trackingUrlType
     *
     * @return \TencentAds\Model\AdTrackingUrlType
     */
    public function getTrackingUrlType()
    {
        return $this->container['trackingUrlType'];
    }

    /**
     * Sets trackingUrlType
     *
     * @param \TencentAds\Model\AdTrackingUrlType $trackingUrlType trackingUrlType
     *
     * @return $this
     */
    public function setTrackingUrlType($trackingUrlType)
    {
        $this->container['trackingUrlType'] = $trackingUrlType;

        return $this;
    }

    /**
     * Gets impressionTrackingUrl
     *
     * @return string
     */
    public function getImpressionTrackingUrl()
    {
        return $this->container['impressionTrackingUrl'];
    }

    /**
     * Sets impressionTrackingUrl
     *
     * @param string $impressionTrackingUrl impressionTrackingUrl
     *
     * @return $this
     */
    public function setImpressionTrackingUrl($impressionTrackingUrl)
    {
        $this->container['impressionTrackingUrl'] = $impressionTrackingUrl;

        return $this;
    }

    /**
     * Gets clickTrackingUrl
     *
     * @return string
     */
    public function getClickTrackingUrl()
    {
        return $this->container['clickTrackingUrl'];
    }

    /**
     * Sets clickTrackingUrl
     *
     * @param string $clickTrackingUrl clickTrackingUrl
     *
     * @return $this
     */
    public function setClickTrackingUrl($clickTrackingUrl)
    {
        $this->container['clickTrackingUrl'] = $clickTrackingUrl;

        return $this;
    }

    /**
     * Gets activeViewTrackingUrl
     *
     * @return string
     */
    public function getActiveViewTrackingUrl()
    {
        return $this->container['activeViewTrackingUrl'];
    }

    /**
     * Sets activeViewTrackingUrl
     *
     * @param string $activeViewTrackingUrl activeViewTrackingUrl
     *
     * @return $this
     */
    public function setActiveViewTrackingUrl($activeViewTrackingUrl)
    {
        $this->container['activeViewTrackingUrl'] = $activeViewTrackingUrl;

        return $this;
    }

    /**
     * Gets videoPlayProgressTrackingUrl
     *
     * @return string
     */
    public function getVideoPlayProgressTrackingUrl()
    {
        return $this->container['videoPlayProgressTrackingUrl'];
    }

    /**
     * Sets videoPlayProgressTrackingUrl
     *
     * @param string $videoPlayProgressTrackingUrl videoPlayProgressTrackingUrl
     *
     * @return $this
     */
    public function setVideoPlayProgressTrackingUrl($videoPlayProgressTrackingUrl)
    {
        $this->container['videoPlayProgressTrackingUrl'] = $videoPlayProgressTrackingUrl;

        return $this;
    }

    /**
     * Gets impressionTrackingTime
     *
     * @return \TencentAds\Model\AdImpressionTrackingTime
     */
    public function getImpressionTrackingTime()
    {
        return $this->container['impressionTrackingTime'];
    }

    /**
     * Sets impressionTrackingTime
     *
     * @param \TencentAds\Model\AdImpressionTrackingTime $impressionTrackingTime impressionTrackingTime
     *
     * @return $this
     */
    public function setImpressionTrackingTime($impressionTrackingTime)
    {
        $this->container['impressionTrackingTime'] = $impressionTrackingTime;

        return $this;
    }

    /**
     * Gets videoPlayProgressPercent
     *
     * @return int
     */
    public function getVideoPlayProgressPercent()
    {
        return $this->container['videoPlayProgressPercent'];
    }

    /**
     * Sets videoPlayProgressPercent
     *
     * @param int $videoPlayProgressPercent videoPlayProgressPercent
     *
     * @return $this
     */
    public function setVideoPlayProgressPercent($videoPlayProgressPercent)
    {
        $this->container['videoPlayProgressPercent'] = $videoPlayProgressPercent;

        return $this;
    }

    /**
     * Gets videoPlayTrackingTime
     *
     * @return \TencentAds\Model\AdVideoPlayTrackingTime
     */
    public function getVideoPlayTrackingTime()
    {
        return $this->container['videoPlayTrackingTime'];
    }

    /**
     * Sets videoPlayTrackingTime
     *
     * @param \TencentAds\Model\AdVideoPlayTrackingTime $videoPlayTrackingTime videoPlayTrackingTime
     *
     * @return $this
     */
    public function setVideoPlayTrackingTime($videoPlayTrackingTime)
    {
        $this->container['videoPlayTrackingTime'] = $videoPlayTrackingTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


