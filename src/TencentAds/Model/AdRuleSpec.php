<?php
/**
 * AdRuleSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * AdRuleSpec Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdRuleSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ad_rule_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ruleType' => 'string',
        'conversionType' => 'string[]',
        'startDate' => 'string',
        'endDate' => 'string',
        'campaignIdList' => 'int[]',
        'productList' => '\TencentAds\Model\AdProduct[]',
        'adgroupIdList' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ruleType' => null,
        'conversionType' => null,
        'startDate' => null,
        'endDate' => null,
        'campaignIdList' => 'int64',
        'productList' => null,
        'adgroupIdList' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ruleType' => 'rule_type',
        'conversionType' => 'conversion_type',
        'startDate' => 'start_date',
        'endDate' => 'end_date',
        'campaignIdList' => 'campaign_id_list',
        'productList' => 'product_list',
        'adgroupIdList' => 'adgroup_id_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ruleType' => 'setRuleType',
        'conversionType' => 'setConversionType',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'campaignIdList' => 'setCampaignIdList',
        'productList' => 'setProductList',
        'adgroupIdList' => 'setAdgroupIdList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ruleType' => 'getRuleType',
        'conversionType' => 'getConversionType',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'campaignIdList' => 'getCampaignIdList',
        'productList' => 'getProductList',
        'adgroupIdList' => 'getAdgroupIdList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONVERSION_TYPE_UNKNOWN = 'UNKNOWN';
    const CONVERSION_TYPE_APP_START_DOWNLOAD = 'APP_START_DOWNLOAD';
    const CONVERSION_TYPE_APP_FINISH_DOWNLOAD = 'APP_FINISH_DOWNLOAD';
    const CONVERSION_TYPE_APP_INSTALL = 'APP_INSTALL';
    const CONVERSION_TYPE_APP_ACTIVATE = 'APP_ACTIVATE';
    const CONVERSION_TYPE_ORDER = 'ORDER';
    const CONVERSION_TYPE_RESERVATION = 'RESERVATION';
    const CONVERSION_TYPE_REGISTRATION_APP = 'REGISTRATION_APP';
    const CONVERSION_TYPE_REGISTRATION_WEB = 'REGISTRATION_WEB';
    const CONVERSION_TYPE_PURCHASE_APP = 'PURCHASE_APP';
    const CONVERSION_TYPE_PURCHASE_WEB = 'PURCHASE_WEB';
    const CONVERSION_TYPE_APPLY_APP = 'APPLY_APP';
    const CONVERSION_TYPE_APPLY_WEB = 'APPLY_WEB';
    const CONVERSION_TYPE_ADD_TO_CART_WEB = 'ADD_TO_CART_WEB';
    const CONVERSION_TYPE_ADD_TO_CART_APP = 'ADD_TO_CART_APP';
    const CONVERSION_TYPE_CONSULTATION_WEB = 'CONSULTATION_WEB';
    const CONVERSION_TYPE_CONSULTATION_PHONE = 'CONSULTATION_PHONE';
    const CONVERSION_TYPE_CALL_BACK = 'CALL_BACK';
    const CONVERSION_TYPE_ADD_TO_WISHLIST = 'ADD_TO_WISHLIST';
    const CONVERSION_TYPE_SHARE = 'SHARE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConversionTypeAllowableValues()
    {
        return [
            self::CONVERSION_TYPE_UNKNOWN,
            self::CONVERSION_TYPE_APP_START_DOWNLOAD,
            self::CONVERSION_TYPE_APP_FINISH_DOWNLOAD,
            self::CONVERSION_TYPE_APP_INSTALL,
            self::CONVERSION_TYPE_APP_ACTIVATE,
            self::CONVERSION_TYPE_ORDER,
            self::CONVERSION_TYPE_RESERVATION,
            self::CONVERSION_TYPE_REGISTRATION_APP,
            self::CONVERSION_TYPE_REGISTRATION_WEB,
            self::CONVERSION_TYPE_PURCHASE_APP,
            self::CONVERSION_TYPE_PURCHASE_WEB,
            self::CONVERSION_TYPE_APPLY_APP,
            self::CONVERSION_TYPE_APPLY_WEB,
            self::CONVERSION_TYPE_ADD_TO_CART_WEB,
            self::CONVERSION_TYPE_ADD_TO_CART_APP,
            self::CONVERSION_TYPE_CONSULTATION_WEB,
            self::CONVERSION_TYPE_CONSULTATION_PHONE,
            self::CONVERSION_TYPE_CALL_BACK,
            self::CONVERSION_TYPE_ADD_TO_WISHLIST,
            self::CONVERSION_TYPE_SHARE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ruleType'] = isset($data['ruleType']) ? $data['ruleType'] : null;
        $this->container['conversionType'] = isset($data['conversionType']) ? $data['conversionType'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['campaignIdList'] = isset($data['campaignIdList']) ? $data['campaignIdList'] : null;
        $this->container['productList'] = isset($data['productList']) ? $data['productList'] : null;
        $this->container['adgroupIdList'] = isset($data['adgroupIdList']) ? $data['adgroupIdList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ruleType
     *
     * @return string
     */
    public function getRuleType()
    {
        return $this->container['ruleType'];
    }

    /**
     * Sets ruleType
     *
     * @param string $ruleType ruleType
     *
     * @return $this
     */
    public function setRuleType($ruleType)
    {
        $this->container['ruleType'] = $ruleType;

        return $this;
    }

    /**
     * Gets conversionType
     *
     * @return string[]
     */
    public function getConversionType()
    {
        return $this->container['conversionType'];
    }

    /**
     * Sets conversionType
     *
     * @param string[] $conversionType conversionType
     *
     * @return $this
     */
    public function setConversionType($conversionType)
    {
        $allowedValues = $this->getConversionTypeAllowableValues();
        if (!is_null($conversionType) && array_diff($conversionType, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'conversionType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['conversionType'] = $conversionType;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param string $startDate startDate
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param string $endDate endDate
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets campaignIdList
     *
     * @return int[]
     */
    public function getCampaignIdList()
    {
        return $this->container['campaignIdList'];
    }

    /**
     * Sets campaignIdList
     *
     * @param int[] $campaignIdList campaignIdList
     *
     * @return $this
     */
    public function setCampaignIdList($campaignIdList)
    {
        $this->container['campaignIdList'] = $campaignIdList;

        return $this;
    }

    /**
     * Gets productList
     *
     * @return \TencentAds\Model\AdProduct[]
     */
    public function getProductList()
    {
        return $this->container['productList'];
    }

    /**
     * Sets productList
     *
     * @param \TencentAds\Model\AdProduct[] $productList productList
     *
     * @return $this
     */
    public function setProductList($productList)
    {
        $this->container['productList'] = $productList;

        return $this;
    }

    /**
     * Gets adgroupIdList
     *
     * @return int[]
     */
    public function getAdgroupIdList()
    {
        return $this->container['adgroupIdList'];
    }

    /**
     * Sets adgroupIdList
     *
     * @param int[] $adgroupIdList adgroupIdList
     *
     * @return $this
     */
    public function setAdgroupIdList($adgroupIdList)
    {
        $this->container['adgroupIdList'] = $adgroupIdList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


